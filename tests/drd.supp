#
# The following suppressions are suited for debug build
# of librpma on Ubuntu 20.04 used in the CircleCI.
# They may not work for any other OS, OS version,
# rdma-core version and for the release build.
#

#
# Assessment: These suppressions indicate a lack of MT safety.
#

{
   Race while reading the name of time zone ("GMT").
   drd:ConflictingAccess
   ...
   fun:syslog
   fun:rpma_log_default_function
   ...
}

{
   Race while reading the name of time zone ("GMT").
   drd:ConflictingAccess
   ...
   fun:get_timestamp_prefix
   fun:rpma_log_default_function
   ...
}

{
   Conflicting load/store in rpma_utils_get_ibv_context()
   drd:ConflictingAccess
   ...
   fun:rpma_utils_get_ibv_context
   ...
}

#
# Assessment: These suppressions do NOT indicate a lack of MT safety.
#
# cma_dev_cnt was a global counter of elements populating the global array of
# devices detected by librdmacm. It was used as an indicator of already done
# initialization. It was checked before locking a mutex required to make any
# changes to the global array and changing the counter itself as follows:
# 
# static int cma_dev_cnt;
# ...
# int ucma_init(void)
# {
#     if (cma_dev_cnt)
#         return 0;
#
#     pthread_mutex_lock(&mut);
#     if (cma_dev_cnt) {
#         pthread_mutex_unlock(&mut);
#         return 0;
#     }
# ...
#     cma_dev_cnt = dev_cnt;
# ...
#     pthread_mutex_unlock(&mut);
# ...
# }
#
# But having a race, in this case, should do no harm since the counter is also
# checked after locking the mutex. So, even writing a new value to the counter
# even if it will be torn and read partially by another thread it won't lead
# to abnormal behaviour.
#
# Note: This issue is no longer the case for rdma-core >= v30.0 since there
# instead of a global array is a global list. But the logic seems to be
# the same: a quick check (a comparison) followed by the mutex lock and
# recheck of the condition so the final assessment should be the same.
#

{
   Conflicting store/load of size 4
   drd:ConflictingAccess
   fun:ucma_init
   ...
}

#
# Assessment: XXX required
#

{
   Conflicting store of size 4 (multithreaded-mr-rpma_mr_reg_0_drd)
   drd:ConflictingAccess
   fun:ibv_dontfork_range
   fun:ibv_reg_mr_iova*
   fun:__ibv_reg_mr
   fun:rpma_peer_mr_reg
   fun:rpma_mr_reg
   ...
}

{
   Conflicting store of size 4 (multithreaded-mr-rpma_mr_reg_0_drd)
   drd:ConflictingAccess
   fun:ibv_dofork_range
   fun:ibv_dereg_mr*
   fun:rpma_mr_dereg
   ...
}

{
   Conflicting load of size 8 in bitmap_set_bit (multithreaded-conn-rpma_conn_req_new_0_drd)
   drd:ConflictingAccess
   ...
   fun:_execute_ioctl_fallback
   fun:ibv_icmd_create_cq
   fun:ibv_cmd_create_cq
   fun:rxe_create_cq
   fun:ibv_create_cq@@IBVERBS_1.1
   fun:rpma_cq_new
   fun:rpma_conn_req_from_id
   fun:rpma_conn_req_new
   ...
}

{
   Conflicting store of size 8 in bitmap_set_bit (multithreaded-conn-rpma_conn_req_new_0_drd)
   drd:ConflictingAccess
   ...
   fun:_execute_ioctl_fallback
   fun:ibv_cmd_destroy_cq
   fun:rxe_destroy_cq
   fun:ibv_destroy_cq@@IBVERBS_1.1
   fun:rpma_cq_delete
   fun:rpma_conn_req_delete
   ...
}

{
   Conflicting store of size 8 (multithreaded-conn-rpma_conn_req_new_0_drd)
   drd:ConflictingAccess
   fun:idm_set
   fun:ucma_insert_id
   fun:rdma_create_id2.part.0
   fun:rpma_conn_req_new
   ...
}

{
   Conflicting store of size 8 (multithreaded-ep-rpma_ep_listen_0_drd)
   drd:ConflictingAccess
   fun:idm_set
   fun:ucma_insert_id
   fun:rdma_create_id2.part.0
   fun:rpma_ep_listen
   ...
}
